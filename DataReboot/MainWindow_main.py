'''
7/25/2013
Sean McLaughlin
This module imports both the auto-generated code in MainWindow and preset_dialog. This is the master window; from here the user can open several windows at the same time, 
and make sure that only one measurement is run at the same time. 
'''

docstring = '''This is the main function for this program. It controls the access to all the other modules, and should be the primary one called. This module
also updates the python path so that this program can be run outside of eclipse. 
This window allows for the onpening of multiple measurement windows and performs the synchronization between them. It also 
'''
# if __name__ == '__main__':
#     print docstring


def lineNo():
    import inspect
    return 'Line '+str(inspect.currentframe().f_back.f_lineno)

import sys

if __name__ == '__main__':
    #add the files in this directory to the pythonpath
    sys.path.append('Preset_GUI')
    sys.path.append('Preliminary Work')
    sys.path.append('INSTconfig_GUI')
    sys.path.append('GASconfig_GUI')
    sys.path.append('config&data')
    sys.path.append('AutoGeneratedFiles')

from PyQt4 import QtGui, QtCore
from MainWindow import Ui_MainWindow
from preset_dialog import Ui_presetDialog

def parseKeyValue(line):
    # a function that will take a line and split it along the equals sign and make a tuple
    splitLine = line.split('=')
    if len(splitLine) != 2:
        return None #if the length is not 2, this line may be blank, or not have a key value
    return (splitLine[0].strip(), splitLine[1].strip())

class Start(QtGui.QWidget): #the class for the main window
    
    def __init__(self ,parent = None):
        super(Start, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        
        self.measurement_Windows = []
        self.masterFilename = 'config&data\master_config.txt'
        self.fileDict = {}
        self.open_master_config()
        
        #signals and slots
        self.ui.button_measurement.clicked.connect(self.measurement)
        self.ui.button_GAS.clicked.connect(self.open_GAS)
        self.ui.button_INST.clicked.connect(self.open_INST)
        self.ui.button_presets.clicked.connect(self.open_Preset)
        self.ui.button_analysis.clicked.connect(self.open_analysis)
        
    def any_running(self):
        #checks if there are an windows running. Returns a boolean. 
        return any(window.isRunning for window in self.measurement_Windows)
        
    def allow_run(self):
        #checks all the measurement windows and returns true if none are running. Returns False if one is. Ensures that communications to instruments dont' cross paths
        #also checks if any of them have the same datafile
        
        dataFiles = {} #count the apperaences of each dataFilename
        for window in self.measurement_Windows:
            if window.dataFilename not in dataFiles:
                dataFiles[window.dataFilename] = 0
            dataFiles[window.dataFilename]+=1
        
        dataFilesInvalid = any(value>1 for value in dataFiles.itervalues())
        
        measurementRunning = self.any_running()
        
        message = ''
        
        if dataFilesInvalid:
            message = 'There was a conflict with the data files'
        elif measurementRunning:
            message = 'There seems to be a measurement running already.'
        return not dataFilesInvalid and not measurementRunning, message #if the dataFiles are invalid or a measurement is running, we don't want to allow a meausrement
        
    def check_runs(self, callerWindow):
        for window in self.measurement_Windows:
            if window is not callerWindow:
                window.check_run()
            
    def closeEvent(self, event):
        #make sure that all the windows close when the main one does. 
        if self.measurement_Windows:
             response = QtGui.QMessageBox.warning(self, 'Warning!', 'Closing this window will close all the measurements too.\nAre you sure you want to close?', buttons=QtGui.QMessageBox.Yes | QtGui.QMessageBox.No, defaultButton=QtGui.QMessageBox.No)
             if response == QtGui.QMessageBox.No:
                 event.ignore()
                 return
        for window in self.measurement_Windows:
            window.close()
        event.accept()
        
    def measurement(self):
        presetsFile = open(self.fileDict['PRESET'] , 'r')
        
        presetNames = ['None']
        with open(self.fileDict['PRESET'], 'r') as presetFile:
            for line in presetFile: #gather all the names from the preset file
                values = parseKeyValue(line)
                if values is not None and values[0] == 'Name':
                    presetNames.append(values[1])
        
        
        import preset_dialog_main
        self.presetDialog = preset_dialog_main.PresetDialog(presetNames)
        if not self.presetDialog.exec_():
            return
        else:
            presetName = self.presetDialog.getChoice()
            
        if presetName == 'None':
            presetName = None 
            
        from pyvisa import visa_exceptions
        import GASconfig
        try:
            GASdict, INSTdict = GASconfig.getsAndSetsFromConfig(self.fileDict['GAS'])
        except visa_exceptions.VisaIOError:
            QtGui.QMessageBox.warning(self, 'Warning', 'There was a problem opening the connections to the instruments. Check that they are configured.', buttons=QtGui.QMessageBox.Ok, defaultButton=QtGui.QMessageBox.Ok)
            return
            
        import MeasurementGUI_main
        self.measurement_Windows.append(MeasurementGUI_main.Start(self.fileDict, presetName,GASdict, INSTdict, parent = self))
        self.measurement_Windows[-1].showMaximized()
        
    def open_analysis(self):
        #hans't been implemented; instead opens a dialog warning the user
        QtGui.QMessageBox.warning(self, 'Analysis', 'The Analysis feature has not been implemented yet. Sorry!', buttons=QtGui.QMessageBox.Ok, defaultButton=QtGui.QMessageBox.Ok)
        
    def open_GAS(self):
        #opens the GAS config module
        import Gasconfig_GUI_main
        self.gasConfig = Gasconfig_GUI_main.Start(self.fileDict['GAS'], self)
        self.gasConfig.show()
        
    def open_INST(self):
        #opens the INSt config module
        import INSTconfig_GUI_main
        self.INSTconfg = INSTconfig_GUI_main.Start(self.fileDict['INST'], self)
        self.INSTconfg.show()
        
    def open_Preset(self):
        #opens the delete preset dialog. 
        import deletePreset_main
        self.presetConfig = deletePreset_main.deletePreset(self.fileDict['PRESET'])
        self.presetConfig.show()
        
    def open_master_config(self):
        #opens the measurement config and creates the self.fileDict dictionary, listing the files where the configs are stored on this machine
        import os
        
        compName = os.environ['COMPUTERNAME']
        lines = []
        master_config = open(self.masterFilename, 'r')
        
        for line in master_config:
            lines.append(line)
            
        master_config.close()
        
        for index in xrange(len(lines)):
            tup = parseKeyValue(lines[index])
            if tup is not None and tup[1] == compName: #found our computer
                for i in xrange(index + 1, index + 4):
                    tup = parseKeyValue(lines[i])
                    if tup is not None:
                        self.fileDict[tup[0]] = tup[1] #add the file type and name into the dicitonary.
                break
            
    def remove_window(self, child):
        #deletes the window rom the list. This frees up memory
        for index,window in enumerate(self.measurement_Windows):
            if child is window:
                window.close()
                break
        self.measurement_Windows.pop(index) #let the garbage collector delete it
        
    def update_GAS_INST(self):
        #updates the GAS and INST objects for each child window. 
        from pyvisa import visa_exceptions
        import GASconfig
        try:
            GASdict, INSTdict = GASconfig.getsAndSetsFromConfig(self.fileDict['GAS'])
        except visa_exceptions.VisaIOError:
            QtGui.QMessageBox.warning(self, 'Warning', 'There was a problem opening the connections to the instruments. Check that they are configured.', buttons=QtGui.QMessageBox.Ok, defaultButton=QtGui.QMessageBox.Ok)
            return
        
        for window in self.measurement_Windows: #send this update down to the lower windows
            while window.isRunning:
                pass #wait until the window is done running. 
            window.GASdict = GASdict
            window.INSTdict = INSTdict
            window.open_GASFile()
        
if __name__ == '__main__':
    
    app = QtGui.QApplication(sys.argv)
    ex = Start()
    ex.show()
    sys.exit(app.exec_())
            